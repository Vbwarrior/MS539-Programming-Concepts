





Future Upgrades:
    Transactions- if a Auto Loaan has been added to Bills then add this to Transportation Category so when user selects it it AutoPopulates the textboxes with Names and amounts- if CC or other that has Min use that unless defined in plan. if there are multiples then require NickNames so this feature will work.
    
    Add category to All Bills so the above feature can work (Loans, CC, Set Utilitie Bills)
    Add check box to make primary Vendor for Category Item, so txtbox will auto populate
    If not a Defined Bill Search DB as user types to suggest possible vendor names.








/*
 *   
 *  
 *  Create Panel for new charges
 *  Create Panel for Paying Bills- create a input box that searches with each keystroke using the AutoComplete functions of the text box
 *          Add the Cash check or charge logo buttons and a Masked text box for amount.
 *          
 *          Add a transactions panel with a datagrid view and ability to search using a calendar control with options this should be similar to GURU Quote with search boxes ontop of every field
 *          
 *          lastly create a panel with the main functions as buttons 
 *          
 *          Add tutorial walk through with opur squerrels pics
 *  
 *   create SQL statments for all inputs and serches
 *   add chart builder functions from GUI Demo project
 *   
 *   add payoff stack to right side
 *  
 *  Create Setup form for New Users
 */


 
/*
 *  Get Custom Button setup from designer files to create a new one on demand.
 *  On form load create a method to search for any custom reports and load them into a List
 * Extract the strings from the list ans split them on ":" and generate buttons, add on click event 'Slider_Clock
 * Create delete Event to run DeleteSQL Command
 */


 /* // Create a Graphics object from the image
                    using (Graphics g = Graphics.FromImage(picDollarSign.Image))
                    {
                        // Draw the centered text
                        using (Font font = new Font("Stencil", 200, FontStyle.Bold | FontStyle.Italic)) // Changed font size to 144
                        {
                            string text1 = "Steam Roller";
                            string text2 = "Financial Application";

                            // Calculate the center coordinates for the first line
                            float centerX1 = (picDollarSign.Image.Width - g.MeasureString(text1, font).Width) / 2;
                            float centerY1 = (picDollarSign.Image.Height - g.MeasureString(text1, font).Height) / 2;

                            // Draw the first line of text
                            g.DrawString(text1, font, Brushes.Black, new PointF(centerX1, centerY1));

                            // Calculate the center coordinates for the second line, positioned under the first line
                            float centerX2 = (picDollarSign.Image.Width - g.MeasureString(text2, font).Width) / 2;
                            float centerY2 = centerY1 + g.MeasureString(text1, font).Height;

                            // Draw the second line of text
                            g.DrawString(text2, font, Brushes.LimeGreen, new PointF(centerX2, centerY2));
                        }*/


Database:

 Get Numeric Count back from reader:

    using (SQLiteDataReader DuplicateReader = data.FetchData(data.SqlStringBuilder(sqlCode: "Check4DuplicateUsers", Value1: userName)))
    {
        if (DuplicateReader.Read()) // Read the first row
        {
            int count = Convert.ToInt32(DuplicateReader[0]); // Get the value of the first column
            if (count > 0) // Check if the count is greater than 0
        {

         }

    }

    Insert:
     db.ExecuteCommand(db.SqlStringBuilder("Budget_4", Value1: cmb.Text, Value2: xValue.Text));

     Read:
       using (SQLiteDataReader accessReader = data.FetchData(data.SqlStringBuilder(sqlCode: "Login", Value1: userName, Value2: password)))
            {
                if (accessReader.HasRows)
                {
                    using (SQLiteDataReader getUsersBudgets = data.FetchData(data.SqlStringBuilder(sqlCode: "Load_Budgets", Value1: userName)))
                    {
                        while (getUsersBudgets.Read())
                        {
                            Budgets.Add(getUsersBudgets.GetInt32(0).ToString());
                        }
                    }

                }

                else
                {
                    lblViolation.Visible = true;
                    FailedLoginAttempts++;

                    if(FailedLoginAttempts > 3) { Application.Exit(); }

                    return;
                }
            }




              using (SQLiteDataReader getUsersBudgets = data.FetchData(data.SqlStringBuilder(sqlCode: "Load_Budgets", Value1: userName)))
                    {
                        while (getUsersBudgets.Read())
                        {
                            Budgets.Add(getUsersBudgets.GetInt32(0).ToString());
                        }
                    }

        public List<string> columns = new List<string>();
        public List<KeyValuePair<string, string>> conditions = new List<KeyValuePair<string, string>>();
        public KeyValuePair<string, string> kvp = new KeyValuePair<string, string>();